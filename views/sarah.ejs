<!DOCTYPE html>
<meta charset="utf-8">

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v6.js"></script>

<!-- Create a div where the graph will take place -->
<svg id="my_datavizblue"></svg>
<svg id="my_datavizgrey"></svg>
<svg id="my_datavizturquoise"></svg>
<svg id="my_datavizbrown"></svg>

<script>

  // set the dimensions and margins of the graph
  const margin = {top: 80, right: 0, bottom: 30, left: 0},
      width = 810 - margin.left - margin.right,
      height = 210 - margin.top - margin.bottom;
  
  //Read the data
  let sumstat;
  let myGroups
  let allKeys
  d3.csv("./data/ds_longFull.csv").then(async function(data) {
        // var max = d3.max(data, function(d) {return +d.expression;} );
        //         console.log('max is ' + max);
        // var min = d3.min(data, function(d) {return +d.expression;} )
        //         console.log('min is ' + min);

        // var scale = d3.scaleLinear().domain([min, max]).range([0, 1]);
        // for (var i in data) {
        //         console.log(scale(data[i])); };

    sumstat = d3.group(data, m => m.dsmoduleColors)
                // .select(sumstat).remove('grey')

    myGroups = data.map(d => d.condition)
    allKeys = new Set(data.map(m=>m.dsmoduleColors));
    console.log(sumstat)

//     var index = sumstat.index(function(o){
//      return o.id === 'grey';
// })
// if (index !== -1) sumstat.splice(index, 1);

//     for(i=0;i<sumstat.length;i++){
//   if(sumstat[i].id === 'grey'){
//     sumstat.splice(i--,1);
//   }
// }

//     d3.select(sumstat.get("grey")).remove()
//     console.log(sumstat.get("grey"))
//     sumstat.forEach((i,index) => {
//         if (console.log(index == 'grey')) { d3.select(index == 'grey').remove() }
//     });
    console.log(sumstat)


    sumstat.forEach((i, index) =>{
      //for (let i = 0; i < sumstat.length - 1; i++) {
      // What is the list of groups?
      console.log(i)



      let selectName = '#my_dataviz' + index;
      console.log(selectName)
      // Add an svg element for each group. The will be one beside each other and will go on the next row when no more room available
      const svg = d3.select(selectName)
              .attr("width", width + margin.left + margin.right)
              .attr("height", height + margin.top + margin.bottom)
              .append("g")
              .attr("transform",
                      `translate(${margin.left},${margin.top})`)


      const myVars = i.map(d => d.proteinId)
      console.log(myVars)
      // Build X scales and axis:
      const x = d3.scaleBand()
              .range([ 0, width ])
              .domain(myGroups)
        //       .padding(0.05);
      svg.append("g")
              .style("font-size", 15)
              .attr("transform", `translate(0, ${height})`)
              .call(d3.axisBottom(x).tickSize(0))
              .select(".domain").remove()


      console.log(myVars.length / 12)

// i.forEach((s, index) =>{
//         console.log(s.expression)
// })

// console.log(i[0].expression)

      // Build Y scales and axis:
      const y = d3.scaleBand()
              .range([ height, 0 ])
              .domain(myVars)
        //       .padding(0.05);
//       svg.append("g")
//               .style("font-size", 15)
//               .call(d3.axisLeft(y).tickSize(0))
//               .select(".domain").remove()
      // Build color scale
      const myColor = d3.scaleSequential()
              .interpolator(d3.interpolateRdBu)  // red high, blue low
              .domain([3000,0])
      console.log('line 73')
//       // create a tooltip
//       const tooltip = d3.select(selectName)
//               .append("div")
//               .style("opacity", 0)
//               .attr("class", "tooltip")
//               .style("background-color", "white")
//               .style("border", "solid")
//               .style("border-width", "2px")
//               .style("border-radius", "5px")
//               .style("padding", "5px")

//       // Three function that change the tooltip when user hover / move / leave a cell
//       const mouseover = function(event,d) {
//         tooltip
//                 .style("opacity", 1)
//         d3.select(this)
//                 .style("stroke", "black")
//                 .style("opacity", 1)
//       }
//       const mousemove = function(event,d) {
//         tooltip.html("Normalized expression<br>for this gene is: " + d.expression)
//                 .style("left", (event.x)/2 + "px")
//                 .style("top", (event.y)/2 + "px")
//       }
//       const mouseleave = function(event,d) {
//         tooltip.style("opacity", 0)
//         d3.select(this)
//                 .style("stroke", "none")
//                 .style("opacity", 0.8)
//       }

      console.log('start add squares')
      // add the squares
      svg.selectAll()
              .data(i, function(d) {return d.condition+':'+d.proteinId;})
              .join("rect")
              .attr("x", function(d) { return x(d.condition) })
              .attr("y", function(d) { return y(d.proteinId) })
              .attr("rx", 4)
              .attr("ry", 4)
              .attr("width", x.bandwidth() )
              .attr("height", 1 )
              .style("fill", function(d) { return myColor(d.expression)} )
              .style("stroke-width", 4)
              .style("stroke", "none")
              .style("opacity", 0.8)
      //       .on("mouseover", mouseover)
      //       .on("mousemove", mousemove)
      //       .on("mouseleave", mouseleave)

      console.log('end add squares')
      // Add title to graph
      svg.append("text")
              .attr("x", 0)
              .attr("y", -20)
              .attr("text-anchor", "left")
              .style("font-size", "22px")
              .text("Module " + index + " with " + myVars.length / 12 + " genes");

//       // Add subtitle to graph
//       svg.append("text")
//               .attr("x", 0)
//               .attr("y", -20)
//               .attr("text-anchor", "left")
//               .style("font-size", "20px")
//               .style("fill", "grey")
//               .style("max-width", 400)
//               .text("Heatmap of ");
    })
  })

  /*function createSumstat(data) {
    sumstat = d3.group(data, m => m.dsmoduleColors) // nest function allows to group the calculation per level of a factor
    myGroups = data.map(d => d.condition)
    allKeys = new Set(data.map(m=>m.dsmoduleColors));
  }*/

  /*function makeGraphs() {
    console.log(sumstat)
    sumstat.forEach((i, index) =>{
      //for (let i = 0; i < sumstat.length - 1; i++) {
      // What is the list of groups?
      console.log(i)



      let selectName = '#my_dataviz' + index;
      console.log(selectName)
      // Add an svg element for each group. The will be one beside each other and will go on the next row when no more room available
      const svg = d3.select(selectName)
              .attr("width", width + margin.left + margin.right)
              .attr("height", height + margin.top + margin.bottom)
              .append("g")
              .attr("transform",
                      `translate(${margin.left},${margin.top})`)


      const myVars = i.map(d => d.proteinId)
      console.log(myVars)
      // Build X scales and axis:
      const x = d3.scaleBand()
              .range([ 0, width ])
              .domain(myGroups)
              .padding(0.05);
      svg.append("g")
              .style("font-size", 15)
              .attr("transform", `translate(0, ${height})`)
              .call(d3.axisBottom(x).tickSize(0))
              .select(".domain").remove()


console.log(myVars.length / 12)

// i.forEach((s, index) =>{
//         console.log(s.expression)
// })

// console.log(i[0].expression)

      // Build Y scales and axis:
      const y = d3.scaleBand()
              .range([ height, 0 ])
              .domain(myVars)
              .padding(0.05);
      svg.append("g")
              .style("font-size", 15)
              .call(d3.axisLeft(y).tickSize(0))
              .select(".domain").remove()
      // Build color scale
      const myColor = d3.scaleSequential()
              .interpolator(d3.interpolateRdBu)  // red high, blue low
              .domain([100.44,0])
      console.log('line 73')
//       // create a tooltip
//       const tooltip = d3.select(selectName)
//               .append("div")
//               .style("opacity", 0)
//               .attr("class", "tooltip")
//               .style("background-color", "white")
//               .style("border", "solid")
//               .style("border-width", "2px")
//               .style("border-radius", "5px")
//               .style("padding", "5px")

//       // Three function that change the tooltip when user hover / move / leave a cell
//       const mouseover = function(event,d) {
//         tooltip
//                 .style("opacity", 1)
//         d3.select(this)
//                 .style("stroke", "black")
//                 .style("opacity", 1)
//       }
//       const mousemove = function(event,d) {
//         tooltip.html("Normalized expression<br>for this gene is: " + d.expression)
//                 .style("left", (event.x)/2 + "px")
//                 .style("top", (event.y)/2 + "px")
//       }
//       const mouseleave = function(event,d) {
//         tooltip.style("opacity", 0)
//         d3.select(this)
//                 .style("stroke", "none")
//                 .style("opacity", 0.8)
//       }

      console.log('start add squares')
      // add the squares
      svg.selectAll()
              .data(i, function(d) {return d.condition+':'+d.proteinId;})
              .join("rect")
              .attr("x", function(d) { return x(d.condition) })
              .attr("y", function(d) { return y(d.proteinId) })
              .attr("rx", 4)
              .attr("ry", 4)
              .attr("width", x.bandwidth() )
              .attr("height", y.bandwidth() )
              .style("fill", function(d) { return myColor(d.expression)} )
              .style("stroke-width", 4)
              .style("stroke", "none")
              .style("opacity", 0.8)
        //       .on("mouseover", mouseover)
        //       .on("mousemove", mousemove)
        //       .on("mouseleave", mouseleave)

      console.log('end add squares')
      // Add title to graph
      svg.append("text")
              .attr("x", 0)
              .attr("y", -20)
              .attr("text-anchor", "left")
              .style("font-size", "22px")
              .text("Module " + index + " with " + myVars.length / 12 + " genes");

//       // Add subtitle to graph
//       svg.append("text")
//               .attr("x", 0)
//               .attr("y", -20)
//               .attr("text-anchor", "left")
//               .style("font-size", "20px")
//               .style("fill", "grey")
//               .style("max-width", 400)
//               .text("Heatmap of ");
    })
  }*/
  
  
  </script>
