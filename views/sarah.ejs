<!DOCTYPE html>
<meta charset="utf-8">

<!-- Load d3.js -->
<script src="https://d3js.org/d3.v6.js"></script>

<!-- Create a div where the graph will take place -->
<div id="my_datavizblue"></div>
<div id="my_datavizgrey"></div>
<div id="my_datavizturquoise"></div>
<div id="my_datavizbrown"></div>

<script>

  // set the dimensions and margins of the graph
  const margin = {top: 30, right: 0, bottom: 30, left: 50},
      width = 810 - margin.left - margin.right,
      height = 210 - margin.top - margin.bottom;
  
  //Read the data
  let sumstat;
  let myGroups
  d3.csv("./data/ds_long.csv").then( async function(data) {
  
    // group the data: I want to draw one line per group
    sumstat = d3.group(data, m => m.dsmoduleColors) // nest function allows to group the calculation per level of a factor
    myGroups = data.map(d => d.condition)
    allKeys = new Set(data.map(m=>m.dsmoduleColors));

  }).then(makeGraphs())



  function makeGraphs() {
    console.log(sumstat)
    sumstat.forEach((i, index) =>{
      //for (let i = 0; i < sumstat.length - 1; i++) {
      // What is the list of groups?
      console.log(i)

      let selectName = '#my_dataviz' + index;
      console.log(selectName)
      // Add an svg element for each group. The will be one beside each other and will go on the next row when no more room available
      const svg = d3.select(selectName)
              .selectAll("uniqueChart")
              .data(i)
              .enter()
              .append("svg")
              .attr("width", width + margin.left + margin.right)
              .attr("height", height + margin.top + margin.bottom)
              .append("g")
              .attr("transform",
                      `translate(${margin.left},${margin.top})`);

      const myVars = i.map(d => d.proteinId)
      console.log(myVars)
      // Build X scales and axis:
      const x = d3.scaleBand()
              .range([ 0, width ])
              .domain(myGroups)
              .padding(0.05);
      svg.append("g")
              .style("font-size", 15)
              .attr("transform", `translate(0, ${height})`)
              .call(d3.axisBottom(x).tickSize(0))
              .select(".domain").remove()

      // Build Y scales and axis:
      const y = d3.scaleBand()
              .range([ height, 0 ])
              .domain(myVars)
              .padding(0.05);
      svg.append("g")
              .style("font-size", 15)
              .call(d3.axisLeft(y).tickSize(0))
              .select(".domain").remove()
      // Build color scale
      const myColor = d3.scaleSequential()
              .interpolator(d3.interpolateRdBu)  // blue high, red low
              .domain([1,100])
      console.log('line 73')
      // create a tooltip
      const tooltip = d3.select(selectName)
              .append("div")
              .style("opacity", 0)
              .attr("class", "tooltip")
              .style("background-color", "white")
              .style("border", "solid")
              .style("border-width", "2px")
              .style("border-radius", "5px")
              .style("padding", "5px")

      // Three function that change the tooltip when user hover / move / leave a cell
      const mouseover = function(event,d) {
        tooltip
                .style("opacity", 1)
        d3.select(this)
                .style("stroke", "black")
                .style("opacity", 1)
      }
      const mousemove = function(event,d) {
        tooltip.html("Normalized expression<br>for this gene is: " + d.expression)
                .style("left", (event.x)/2 + "px")
                .style("top", (event.y)/2 + "px")
      }
      const mouseleave = function(event,d) {
        tooltip.style("opacity", 0)
        d3.select(this)
                .style("stroke", "none")
                .style("opacity", 0.8)
      }

      console.log('start add squares')
      // add the squares
      svg.selectAll()
              .data(i, function(d) {return d.condition+':'+d.proteinId;})
              .join("rect")
              .attr("x", function(d) { return x(d.condition) })
              .attr("y", function(d) { return y(d.proteinId) })
              .attr("rx", 4)
              .attr("ry", 4)
              .attr("width", x.bandwidth() )
              .attr("height", y.bandwidth() )
              .style("fill", function(d) { return myColor(d.expression)} )
              .style("stroke-width", 4)
              .style("stroke", "none")
              .style("opacity", 0.8)
              .on("mouseover", mouseover)
              .on("mousemove", mousemove)
              .on("mouseleave", mouseleave)

      console.log('end add squares')
      // Add title to graph
      svg.append("text")
              .attr("x", 0)
              .attr("y", -50)
              .attr("text-anchor", "left")
              .style("font-size", "22px")
              .text("Debaryomyces subglobosis heatmap across conditions");

      // Add subtitle to graph
      svg.append("text")
              .attr("x", 0)
              .attr("y", -20)
              .attr("text-anchor", "left")
              .style("font-size", "14px")
              .style("fill", "grey")
              .style("max-width", 400)
              .text("Heatmap of Debaryomyces subglobosis RNA-seq data across growth conditions");
    })
    }
  // Labels of row and columns -> unique identifier of the column called 'group' and 'variable'

  

  

  
  
  </script>
