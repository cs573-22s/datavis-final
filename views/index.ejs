<!DOCTYPE html>
<html lang="en">
<%- include("./partials/head.ejs") %>

<body>
<!-- Load d3.js -->
<script src="https://d3js.org/d3.v6.js"></script>
<script src="./js/scripts.js" defer></script>
<%- include("./partials/nav.ejs") %>

<!-- Create a div where the graph will take place -->
<!--<div id="my_dataviz"></div>-->
<svg width=1000 height=800></svg>
<script defer>
    const color = d3.scaleOrdinal()
        .range(['blue', 'brown', 'grey', 'turquoise'])
    d3.json('./data/nodeLinkJSON2.json').then(function(data){
        console.log(data);
        buildNetwork(data);
    })

    function buildNetwork(data){
        var svg = d3.select('svg');
        var height = +svg.attr('height');
        var width = +svg.attr('width');

        // simulation definition
        var simulation = d3.forceSimulation(data.nodes)
            .force('link', d3.forceLink(data.links).id(d => d.id).distance(100))
            .force('charge', d3.forceManyBody().strength(-1000))
            .force('center', d3.forceCenter(width / 2, height / 2))
        //.force('x', d3.forceX(d => d.group == 1 ? -1000: 100))
        // drawing nodes and links
        var link = svg.append('g')
            .selectAll('line')
            .data(data.links)
            .enter().append('line')
            .attr('stroke-width', d => Math.sqrt(d.weight*16))
            .attr('stroke', '#999')
            .attr('stroke-opacity', 0.6)

        var node = svg.append('g')
            .selectAll('circle')
            .data(data.nodes)
            .enter().append('circle')
            .attr('r', 8)
            .attr('fill', d => color(d.group))
            //.attr('fill', 'blue')
            .attr('stroke', '#fff')
            .attr('stroke-width', 1.5)
            .call(drag(simulation));

        node.append('title')
            .text( d => d.id );


        // use simulation to update nodes and links
        simulation.on('tick', function () {
            link
                .attr('x1', d => d.source.x)
                .attr('y1', d => d.source.y)
                .attr('x2', d => d.target.x)
                .attr('y2', d => d.target.y)

            node
                .attr('cx', d => d.x)
                .attr('cy', d => d.y)



        })
        function drag(simulation) {
            function dragstarted(event) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                event.subject.fx = event.subject.x;
                event.subject.fy = event.subject.y;
            }

            function dragged(event) {
                event.subject.fx = event.x;
                event.subject.fy = event.y;
            }

            function dragended(event) {
                if (!event.active) simulation.alphaTarget(0);
                event.subject.fx = null;
                event.subject.fy = null;
            }

            return d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended);
        }
    }

</script>
<!--<script defer>

    // set the dimensions and margins of the graph
    const margin = {top: 30, right: 30, bottom: 70, left: 60},
        width = 460 - margin.left - margin.right,
        height = 400 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    const svg = d3.select("#my_dataviz")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", `translate(${margin.left},${margin.top})`);

    // Parse the Data
    d3.csv("./data/dsMEs.csv").then( function(data) {

        // X axis
        const x = d3.scaleBand()
            .range([ 0, width ])
            .domain(data.map(d => d.condition))
            .padding(0.2);
        svg.append("g")
            .attr("transform", `translate(0, ${height})`)
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end");

        // Add Y axis
        const y = d3.scaleLinear()
            .domain([-0.5, 0.5])
            .range([ height, 0]);
        svg.append("g")
            .call(d3.axisLeft(y));

        // Bars
        svg.selectAll("mybar")
            .data(data)
            .join("rect")
            .attr("x", d => x(d.condition))
            .attr("y", d => {
                if (d.MEblue < 0) {
                    return height/2;
                } else {
                    return y(d.MEblue)
                }
            })
            .attr("width", x.bandwidth())
            .attr("height", d => height - y(Math.abs(d.MEblue)) - height/2)
            .attr("fill", "#69b3a2")
    })
</script>-->

</body>
</html>






