<!DOCTYPE html>
<html lang="en">
<%- include("./partials/head.ejs") %>

<body>
<style>
    .fullBox {
        display: grid;
        grid-template: 100%/ 60% 40%;
        height: 100%;
        width: 100%;
        position: absolute;
    }
    .vizBox {
        display: grid;
        grid-template: 50% 50%/ 100%;
    }
    .filterBox {

        height: 100%;
        display: grid;
        grid-template: 30% 70%/ 100% ;
    }
    table, th, td {
        border: 1px solid;
    }
    #filterForm {
        height: 100%;
        overflow: scroll;
    }
    #tableDiv {
        height: 100%;
        overflow: scroll;
    }
</style>
<!-- Load d3.js -->
<script src="https://d3js.org/d3.v6.js"></script>
<script src="./js/scripts.js" defer></script>


<div class="fullBox">
    <!-- Create a div where the graph will take place -->
    <!--<div id="my_dataviz"></div>-->
    <!--<svg width=1000 height=800></svg>-->
    <div class="vizBox">
        <div id="nodeLinkViz"></div>
        <div>
            <svg id="my_datavizblue"></svg>
            <svg id="my_datavizturquoise"></svg>
            <svg id="my_datavizbrown"></svg>
        </div>
    </div>

    <div class="filterBox">
        <div id="filterDiv" style="background: aquamarine">
            <div id="filterForm">
                <input type="checkbox" id="checkEcNum" name="checkEcNum" value="NA">
                <label for="checkEcNum">Exclude NA from ecNum</label><br>
                <input type="checkbox" id="checkDefinition" name="checkDefinition" value="NA">
                <label for="checkDefinition">Exclude NA from Definition</label><br>
                <input type="checkbox" id="checkGotermID" name="checkGotermID" value="NA">
                <label for="checkGotermID">Exclude NA from goTermID</label><br>
                <input type="checkbox" id="checkKogId" name="checkKogId" value="NA">
                <label for="checkKogId">Exclude NA from KogId</label><br>
                <input type="checkbox" id="checkKogClass" name="checkKogClass" value="NA">
                <label for="checkKogClass">Exclude NA from KogClass</label><br>
                <input type="checkbox" id="checkIprId" name="checkIprId" value="NA">
                <label for="checkIprId">Exclude NA from Ipr Id</label><br>
                <input type="checkbox" id="checkFunction" name="checkFunction" value="NA">
                <label for="checkFunction">Exclude NA from goTermID</label><br>
                <br>
                <button onclick="submitHandler()" id="reviewSubmit">Submit Filters</button>
                <br>
            </div>
        </div>
        <div id="tableDiv" style="background: lightpink"></div>
    </div>

</div>
<!--<script defer>

    const color = d3.scaleOrdinal()
        .range(['blue', 'brown', 'grey', 'turquoise'])
    d3.json('./data/colorLink.json').then(async function(data){
        console.log(data);
        await buildNetwork(data);
        buildChart1();
        buildChart2();
        buildChart3();
        buildChart4();
    })

    function buildNetwork(data){
        var svg = d3.select('svg');
        var height = +svg.attr('height');
        var width = +svg.attr('width');

        // simulation definition
        var simulation = d3.forceSimulation(data.nodes)
            .force('link', d3.forceLink(data.links).id(d => d.id).distance(450))
            .force('charge', d3.forceManyBody().strength(d => d.weight * 1000))
            .force('center', d3.forceCenter(width / 2, height / 2))
            //.force('x', d3.forceX(d => d.group == 1 ? -100: 0))
        // drawing nodes and links
        var link = svg.append('g')
            .selectAll('line')
            .data(data.links)
            .enter().append('line')
            .attr('stroke-width', d => Math.sqrt(d.weight*16))
            .attr('stroke', '#999')
            .attr('stroke-opacity', 0.6)

        var node = svg.append('g')
            .selectAll('svg')
            .data(data.nodes)
            .enter().append('svg')
            .attr('width', 300)
            .attr('height', 300)
            //.attr('r', 8)
            .attr('fill', d => color(d.group))
            .attr('stroke', '#fff')
            .attr('stroke-width', 1.5)
            .attr('id', d => d.id)
            .call(drag(simulation))



        node.append('title')
            .text( d => d.id );



        // use simulation to update nodes and links
        simulation.on('tick', function () {
            link
                .attr('x1', d => d.source.x)
                .attr('y1', d => d.source.y)
                .attr('x2', d => d.target.x)
                .attr('y2', d => d.target.y)

            node
                .attr('x', d => d.x - 100)
                .attr('y', d => d.y - 100)



        })
        function drag(simulation) {
            function dragstarted(event) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                event.subject.fx = event.subject.x;
                event.subject.fy = event.subject.y;
            }

            function dragged(event) {
                event.subject.fx = event.x;
                event.subject.fy = event.y;
            }

            function dragended(event) {
                if (!event.active) simulation.alphaTarget(0);
                event.subject.fx = null;
                event.subject.fy = null;
            }

            return d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended);
        }
    }

    function buildChart1() {
        // set the dimensions and margins of the graph
        const marginCharts = {top: 10, right: 10, bottom: 40, left: 40},
            widthCharts = 300 - marginCharts.left - marginCharts.right,
            heightCharts = 300 - marginCharts.top - marginCharts.bottom;


        // append the svg object to the body of the page
        const blueSVG = d3.select("#MEblue")
            //.append("svg")
            //.attr("width", widthCharts + marginCharts.left + marginCharts.right)
            //.attr("height", heightCharts + marginCharts.top + marginCharts.bottom)
            .append("g")
            .attr("transform", `translate(${marginCharts.left},${marginCharts.top})`);


        // Parse the Data
        d3.csv("./data/dsMEs.csv").then(function (data) {

            // X axis
            const x = d3.scaleBand()
                .range([0, widthCharts])
                .domain(data.map(d => d.condition))
                .padding(0.2);
            blueSVG.append("g")
                .attr("transform", `translate(0, ${heightCharts})`)
                .call(d3.axisBottom(x))
                .selectAll("text")
                .attr("transform", "translate(-10,0)rotate(-45)")
                .style("text-anchor", "end");

            // Add Y axis
            const y = d3.scaleLinear()
                .domain([-0.5, 0.5])
                .range([heightCharts, 0]);
            blueSVG.append("g")
                .call(d3.axisLeft(y));

            // Bars
            blueSVG.selectAll("mybar")
                .data(data)
                .join("rect")
                .attr("x", d => x(d.condition))
                .attr("y", d => {
                    if (d.MEblue < 0) {
                        return heightCharts / 2;
                    } else {
                        return y(d.MEblue)
                    }
                })
                .attr("width", x.bandwidth())
                .attr("height", d => heightCharts - y(Math.abs(d.MEblue)) - heightCharts / 2)
                .attr("fill", "#69b3a2")
        })
    }
    function buildChart2() {
        // set the dimensions and margins of the graph
        const marginCharts = {top: 10, right: 10, bottom: 40, left: 40},
            widthCharts = 300 - marginCharts.left - marginCharts.right,
            heightCharts = 300 - marginCharts.top - marginCharts.bottom;


        // append the svg object to the body of the page
        const blueSVG = d3.select("#MEbrown")
            //.append("svg")
            //.attr("width", widthCharts + marginCharts.left + marginCharts.right)
            //.attr("height", heightCharts + marginCharts.top + marginCharts.bottom)
            .append("g")
            .attr("transform", `translate(${marginCharts.left},${marginCharts.top})`);


        // Parse the Data
        d3.csv("./data/dsMEs.csv").then(function (data) {

            // X axis
            const x = d3.scaleBand()
                .range([0, widthCharts])
                .domain(data.map(d => d.condition))
                .padding(0.2);
            blueSVG.append("g")
                .attr("transform", `translate(0, ${heightCharts})`)
                .call(d3.axisBottom(x))
                .selectAll("text")
                .attr("transform", "translate(-10,0)rotate(-45)")
                .style("text-anchor", "end");

            // Add Y axis
            const y = d3.scaleLinear()
                .domain([-0.5, 0.5])
                .range([heightCharts, 0]);
            blueSVG.append("g")
                .call(d3.axisLeft(y));

            // Bars
            blueSVG.selectAll("mybar")
                .data(data)
                .join("rect")
                .attr("x", d => x(d.condition))
                .attr("y", d => {
                    if (d.MEbrown < 0) {
                        return heightCharts / 2;
                    } else {
                        return y(d.MEbrown)
                    }
                })
                .attr("width", x.bandwidth())
                .attr("height", d => heightCharts - y(Math.abs(d.MEbrown)) - heightCharts / 2)
                .attr("fill", "#69b3a2")
        })
    }
    function buildChart3() {
        // set the dimensions and margins of the graph
        const marginCharts = {top: 10, right: 10, bottom: 40, left: 40},
            widthCharts = 300 - marginCharts.left - marginCharts.right,
            heightCharts = 300 - marginCharts.top - marginCharts.bottom;


        // append the svg object to the body of the page
        const blueSVG = d3.select("#MEgrey")
            //.append("svg")
            //.attr("width", widthCharts + marginCharts.left + marginCharts.right)
            //.attr("height", heightCharts + marginCharts.top + marginCharts.bottom)
            .append("g")
            .attr("transform", `translate(${marginCharts.left},${marginCharts.top})`);


        // Parse the Data
        d3.csv("./data/dsMEs.csv").then(function (data) {

            // X axis
            const x = d3.scaleBand()
                .range([0, widthCharts])
                .domain(data.map(d => d.condition))
                .padding(0.2);
            blueSVG.append("g")
                .attr("transform", `translate(0, ${heightCharts})`)
                .call(d3.axisBottom(x))
                .selectAll("text")
                .attr("transform", "translate(-10,0)rotate(-45)")
                .style("text-anchor", "end");

            // Add Y axis
            const y = d3.scaleLinear()
                .domain([-0.5, 0.5])
                .range([heightCharts, 0]);
            blueSVG.append("g")
                .call(d3.axisLeft(y));

            // Bars
            blueSVG.selectAll("mybar")
                .data(data)
                .join("rect")
                .attr("x", d => x(d.condition))
                .attr("y", d => {
                    if (d.MEgrey < 0) {
                        return heightCharts / 2;
                    } else {
                        return y(d.MEgrey)
                    }
                })
                .attr("width", x.bandwidth())
                .attr("height", d => heightCharts - y(Math.abs(d.MEgrey)) - heightCharts / 2)
                .attr("fill", "#69b3a2")
        })
    }
    function buildChart4() {
        // set the dimensions and margins of the graph
        const marginCharts = {top: 10, right: 10, bottom: 40, left: 40},
            widthCharts = 300 - marginCharts.left - marginCharts.right,
            heightCharts = 300 - marginCharts.top - marginCharts.bottom;


        // append the svg object to the body of the page
        const blueSVG = d3.select("#MEturquoise")
            //.append("svg")
            //.attr("width", widthCharts + marginCharts.left + marginCharts.right)
            //.attr("height", heightCharts + marginCharts.top + marginCharts.bottom)
            .append("g")
            .attr("transform", `translate(${marginCharts.left},${marginCharts.top})`);


        // Parse the Data
        d3.csv("./data/dsMEs.csv").then(function (data) {

            // X axis
            const x = d3.scaleBand()
                .range([0, widthCharts])
                .domain(data.map(d => d.condition))
                .padding(0.2);
            blueSVG.append("g")
                .attr("transform", `translate(0, ${heightCharts})`)
                .call(d3.axisBottom(x))
                .selectAll("text")
                .attr("transform", "translate(-10,0)rotate(-45)")
                .style("text-anchor", "end");

            // Add Y axis
            const y = d3.scaleLinear()
                .domain([-0.5, 0.5])
                .range([heightCharts, 0]);
            blueSVG.append("g")
                .call(d3.axisLeft(y));

            // Bars
            blueSVG.selectAll("mybar")
                .data(data)
                .join("rect")
                .attr("x", d => x(d.condition))
                .attr("y", d => {
                    if (d.MEturquoise < 0) {
                        return heightCharts / 2;
                    } else {
                        return y(d.MEturquoise)
                    }
                })
                .attr("width", x.bandwidth())
                .attr("height", d => heightCharts - y(Math.abs(d.MEturquoise)) - heightCharts / 2)
                .attr("fill", "#69b3a2")
        })
    }

</script>-->
<script defer>

    let listOfColors;
    let listOfPathways;
    let listOfecNum;
    let listOfdefinition;
    let listOfgotermID;
    let listOfgotermType;
    let listOfgoAcc;
    let listOfkogID;
    let listOfkogdefine;
    let listOfkogClass;
    let listOfiprId;
    let listOfiprDesc;
    let listOf15;
    let listOfFeature;
    let listOfRecordId;
    let listOfFunction;
    let listOfGeneID;
    const columns = ["","proteinId","cont","cont.1","cont.2","lowN","lowN.1","lowN.2","salt","salt.1","salt.2","lowFE","lowFE.1","lowFE.2","dsmoduleColors","MEblue","MEbrown","MEgrey","MEturquoise","ecNum","definition","pathway","gotermID","gotermType","goAcc","kogID","kogdefine","kogClass","iprId","iprDesc","...15","Feature","Record.Id","Function","GeneID"]

    callD3()

    function tabulate (data,columns) {
        document.getElementById('tableDiv').innerHTML = "";
        var table = d3.select('#tableDiv').append('table')
        var thead = table.append('thead')
        var tbody = table.append('tbody')

        thead.append('tr')
            .selectAll('th')
            .data(columns)
            .enter()
            .append('th')
            .text(function (d) { return d })

        var rows = tbody.selectAll('tr')
            .data(data)
            .enter()
            .append('tr')
            .attr('id', d => d.proteinId)

        rows.append('td').html(d => {return `<input type="checkbox" id="proteinCheck" name="proteinCheck" value='` + d.proteinId + `'>`;})


        var cells = rows.selectAll('td')
            .data(function(row) {
                return columns.map(function (column) {
                    return { column: column, value: row[column] }
                })
            })
            .enter()
            .append('td')
            .text(function (d) { return d.value })

        return table;
    }


    function callD3(proteinId, color, ecNum, filterDefinition, pathway, gotermID, kogId, kogClass, iprId, filterFunction) {
        d3.csv("./data/MM_ds_counts_annotation.csv").then(function (data) {

            let filteredData = data
            if (proteinId && proteinId.length > 0) {
                filteredData = filteredData.filter(function(d) {
                    for (let pathOpt of proteinId) {
                        if (d["proteinId"] == pathOpt) {
                            return d;
                        }
                    }
                })
            }
            if (color && color.length > 0) {
                filteredData = filteredData.filter(function(d) {
                    for (let pathOpt of color) {
                        if (d["dsmoduleColors"] == pathOpt) {
                            return d;
                        }
                    }
                })
            }
            if (pathway && pathway.length > 0) {
                filteredData = filteredData.filter(function(d) {
                    for (let pathOpt of pathway) {
                        if (d["pathway"] == pathOpt) {
                            return d;
                        }
                    }
                })
            }
            if (ecNum) {
                filteredData = filteredData.filter(d => {
                    if (d["ecNum"] !== 'NA') {
                        return d;
                    }
                })
            }
            if (filterDefinition) {
                filteredData = filteredData.filter(d => {
                    if (d["definition"] !== 'NA') {
                        return d;
                    }
                })
            }
            if (gotermID) {
                filteredData = filteredData.filter(d => {
                    if (d["gottermID"] !== 'NA') {
                        return d;
                    }
                })
            }
            if (kogId) {
                filteredData = filteredData.filter(d => {
                    if (d["kogId"] !== 'NA') {
                        return d;
                    }
                })
            }
            if (kogClass) {
                filteredData = filteredData.filter(d => {
                    if (d["kogClass"] !== 'NA') {
                        return d;
                    }
                })
            }
            if (iprId) {
                filteredData = filteredData.filter(d => {
                    if (d["iprId"] !== 'NA') {
                        return d;
                    }
                })
            }
            if (filterFunction) {
                filteredData = filteredData.filter(d => {
                    if (d["filterFunction"] !== 'NA') {
                        return d;
                    }
                })
            }
            console.log(filteredData)

            let heatMapData = [];
            heatMapData = Array.from(new Set (filteredData.map(d => d.proteinId)))
            console.log(heatMapData)

            tabulate(filteredData, columns)
            listOfColors = Array.from(new Set (data.map(d => d.dsmoduleColors)))
            listOfPathways = Array.from(new Set (data.map(d => d.pathway)))
            //console.log(listOfPathways) //82
            //"ecNum","definition","pathway","gotermID","gotermType","goAcc","kogID","kogdefine","kogClass","iprId","iprDesc",
            // "...15","Feature","Record.Id","Function","GeneID"
            listOfecNum = Array.from(new Set (data.map(d => d.ecNum)))
            // console.log(listOfecNum) //388 'NA'
            listOfdefinition = Array.from(new Set (data.map(d => d.definition)))
            // console.log(listOfdefinition) //388 'NA'
            listOfgotermID = Array.from(new Set (data.map(d => d.gotermID)))
            // console.log(listOfgotermID) //1010 'NA'
            listOfgotermType = Array.from(new Set (data.map(d => d.gotermType)))
            // console.log(listOfgotermType) //1010 'NA'
            listOfgoAcc = Array.from(new Set (data.map(d => d.goAcc)))
            // console.log(listOfgoAcc) //1010 'NA'
            listOfkogID = Array.from(new Set (data.map(d => d.kogID)))
            // console.log(listOfkogID) //1689 'NA'
            listOfkogClass = Array.from(new Set (data.map(d => d.kogClass)))
            // console.log(listOfkogClass) //102 'NA'
            listOfiprId = Array.from(new Set (data.map(d => d.iprId)))
            // console.log(listOfiprId) //384 'NA'
            listOfiprDesc = Array.from(new Set (data.map(d => d.iprDesc)))
            // console.log(listOfiprDesc) //384  'NA'
            listOfFeature= Array.from(new Set (data.map(d => d.Feature)))
            // console.log(listOfFeature) //3269 all individual
            listOfFunction= Array.from(new Set (data.map(d => d.Function)))
            // console.log(listOfFunction) //1607 'NA'
            listOfGeneID= Array.from(new Set (data.map(d => d.GeneID)))
            // console.log(listOfGeneID) //3269 all individual
            createFilters()
            makeHeatMaps(heatMapData)
        })
    }

    let filtersCreated = false;
    function createFilters() {
        if (!filtersCreated) {
            listOfPathways.forEach(i => {
                var checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.id = 'check' + i;
                checkbox.name = 'pathway';
                checkbox.value = i;

                var label = document.createElement('label')
                label.htmlFor = 'check' + i;
                label.appendChild(document.createTextNode(i));

                var br = document.createElement('br');

                var container = document.getElementById('filterForm');
                container.appendChild(checkbox);
                container.appendChild(label);
                container.appendChild(br);
            })
            listOfColors.forEach(i => {
                var checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.id = 'colorcheck' + i;
                checkbox.name = 'colorpathway';
                checkbox.value = i;

                var label = document.createElement('label')
                label.htmlFor = 'colorcheck' + i;
                label.appendChild(document.createTextNode(i));

                var br = document.createElement('br');

                var container = document.getElementById('filterForm');
                container.appendChild(checkbox);
                container.appendChild(label);
                container.appendChild(br);
            })
        }
        filtersCreated = true;
    }

    function submitHandler() {
        let checkedCheckboxes = [];
        var markedCheckbox = document.getElementsByName('pathway');
        for (var checkbox of markedCheckbox) {
            if (checkbox.checked) {
                checkedCheckboxes.push(checkbox.value)
            }
        }
        let ecNum = false;
        if (document.getElementById('checkEcNum').checked) {
            ecNum = true;
        }
        let filterDef = false;
        if (document.getElementById('checkDefinition').checked) {
            filterDef = true;
        }
        let gotermId = false;
        if (document.getElementById('checkGotermID').checked) {
            gotermId = true;
        }
        let kogId = false;
        if (document.getElementById('checkKogId').checked) {
            kogId = true;
        }
        let kogClass = false;
        if (document.getElementById('checkKogClass').checked) {
            kogClass = true;
        }
        let iprId = false;
        if (document.getElementById('checkIprId').checked) {
            iprId = true;
        }
        let filterFxn = false;
        if (document.getElementById('checkFunction').checked) {
            filterFxn = true;
        }


        let checkedProteinCheckboxes = [];
        var markedProteinCheckbox = document.getElementsByName('proteinCheck');
        for (var checkbox of markedProteinCheckbox) {
            if (checkbox.checked) {
                checkedProteinCheckboxes.push(checkbox.value)
            }
        }
        let checkedColorCheckboxes = [];
        var markedColorCheckbox = document.getElementsByName('colorpathway');
        for (var checkbox of markedColorCheckbox) {
            if (checkbox.checked) {
                checkedColorCheckboxes.push(checkbox.value)
            }
        }

        callD3(checkedProteinCheckboxes, checkedColorCheckboxes, ecNum, filterDef, checkedCheckboxes, gotermId, kogId, kogClass, iprId, filterFxn)
    }




    // set the dimensions and margins of the graph
    const margin = {top: 80, right: 0, bottom: 30, left: 0},
        width = 810 - margin.left - margin.right,
        height = 210 - margin.top - margin.bottom;

    //Read the data
    let sumstat;
    let myGroups
    let allKeys
    function makeHeatMaps(filters) {
        document.getElementById('my_datavizblue').innerHTML = "";
        document.getElementById('my_datavizbrown').innerHTML = "";
        document.getElementById('my_datavizturquoise').innerHTML = "";
        d3.csv("./data/ds_longFull.csv").then(async function(data) {

            if (filters && filters.length > 0) {
                data = data.filter(function(d) {
                    for (let proteinId of filters) {
                        if (d["proteinId"] == proteinId) {
                            return d;
                        }
                    }
                })
            }

        sumstat = d3.group(data, m => m.dsmoduleColors)

        myGroups = data.map(d => d.condition)
        allKeys = new Set(data.map(m=>m.dsmoduleColors));

        sumstat.forEach((i, index) =>{
            if (index === 'grey') { return;}

            let selectName = '#my_dataviz' + index;
            // Add an svg element for each group. The will be one beside each other and will go on the next row when no more room available
            const svg = d3.select(selectName)
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform",
                    `translate(${margin.left},${margin.top})`)


            const myVars = i.map(d => d.proteinId)
            console.log(myVars)
            // Build X scales and axis:
            const x = d3.scaleBand()
                .range([ 0, width ])
                .domain(myGroups)
            //       .padding(0.05);
            svg.append("g")
                .style("font-size", 15)
                .attr("transform", `translate(0, ${height})`)
                .call(d3.axisBottom(x).tickSize(0))
                .select(".domain").remove()


            console.log(myVars.length / 12)


            // Build Y scales and axis
            const y = d3.scaleBand()
                .range([ height, 0 ])
                .domain(myVars)
            //       .padding(0.05);

            // Build color scale
            const myColor = d3.scaleSequential()
                .interpolator(d3.interpolateRdBu)  // red high, blue low
                .domain([3000,0])
            console.log('line 73')


            console.log('start add squares')
            // add the squares
            svg.selectAll()
                .data(i, function(d) {return d.condition+':'+d.proteinId;})
                .join("rect")
                .attr("x", function(d) { return x(d.condition) })
                .attr("y", function(d) { return y(d.proteinId) })
                .attr("rx", 4)
                .attr("ry", 4)
                .attr("width", x.bandwidth() )
                .attr("height", 1 )
                .style("fill", function(d) { return myColor(d.expression)} )
                .style("stroke-width", 4)
                .style("stroke", "none")
                .style("opacity", 0.8)
            //       .on("mouseover", mouseover)
            //       .on("mousemove", mousemove)
            //       .on("mouseleave", mouseleave)

            console.log('end add squares')
            // Add title to graph
            svg.append("text")
                .attr("x", 0)
                .attr("y", -20)
                .attr("text-anchor", "left")
                .style("font-size", "22px")
                .text("Module " + index + " with " + myVars.length / 12 + " genes");

//       // Add subtitle to graph
//       svg.append("text")
//               .attr("x", 0)
//               .attr("y", -20)
//               .attr("text-anchor", "left")
//               .style("font-size", "20px")
//               .style("fill", "grey")
//               .style("max-width", 400)
//               .text("Heatmap of ");
        })
    })}

</script>
<!--<script defer >
    d3.text("./data/MM_ds_counts_annotation.csv", function(data) {
        var parsedCSV = d3.csvParseRows(data);

        var container = d3.select("#tableDiv")
            .append("table")

            .selectAll("tr")
            .data(parsedCSV).enter()
            .append("tr")

            .selectAll("td")
            .data(function(d) { return d; }).enter()
            .append("td")
            .text(function(d) { return d; });
    });
</script>-->
<!--<script defer>
    const color = d3.scaleOrdinal()
        .range(['blue', 'brown', 'grey', 'turquoise'])
    d3.json('./data/nodeLinkJSON2.json').then(function(data){
        console.log(data);
        buildNetwork(data);
    })

    function buildNetwork(data){
        var svg = d3.select('svg');
        var height = +svg.attr('height');
        var width = +svg.attr('width');

        // simulation definition
        var simulation = d3.forceSimulation(data.nodes)
            .force('link', d3.forceLink(data.links).id(d => d.id).distance(100))
            .force('charge', d3.forceManyBody().strength(-1000))
            .force('center', d3.forceCenter(width / 2, height / 2))
        //.force('x', d3.forceX(d => d.group == 1 ? -1000: 100))
        // drawing nodes and links
        var link = svg.append('g')
            .selectAll('line')
            .data(data.links)
            .enter().append('line')
            .attr('stroke-width', d => Math.sqrt(d.weight*16))
            .attr('stroke', '#999')
            .attr('stroke-opacity', 0.6)

        var node = svg.append('g')
            .selectAll('circle')
            .data(data.nodes)
            .enter().append('circle')
            .attr('r', 8)
            .attr('fill', d => color(d.group))
            //.attr('fill', 'blue')
            .attr('stroke', '#fff')
            .attr('stroke-width', 1.5)
            .call(drag(simulation));

        node.append('title')
            .text( d => d.id );


        // use simulation to update nodes and links
        simulation.on('tick', function () {
            link
                .attr('x1', d => d.source.x)
                .attr('y1', d => d.source.y)
                .attr('x2', d => d.target.x)
                .attr('y2', d => d.target.y)

            node
                .attr('cx', d => d.x)
                .attr('cy', d => d.y)



        })
        function drag(simulation) {
            function dragstarted(event) {
                if (!event.active) simulation.alphaTarget(0.3).restart();
                event.subject.fx = event.subject.x;
                event.subject.fy = event.subject.y;
            }

            function dragged(event) {
                event.subject.fx = event.x;
                event.subject.fy = event.y;
            }

            function dragended(event) {
                if (!event.active) simulation.alphaTarget(0);
                event.subject.fx = null;
                event.subject.fy = null;
            }

            return d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended);
        }
    }

</script>-->
<!--<script defer>

    // set the dimensions and margins of the graph
    const margin = {top: 30, right: 30, bottom: 70, left: 60},
        width = 460 - margin.left - margin.right,
        height = 400 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    const svg = d3.select("#my_dataviz")
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", `translate(${margin.left},${margin.top})`);

    // Parse the Data
    d3.csv("./data/dsMEs.csv").then( function(data) {

        // X axis
        const x = d3.scaleBand()
            .range([ 0, width ])
            .domain(data.map(d => d.condition))
            .padding(0.2);
        svg.append("g")
            .attr("transform", `translate(0, ${height})`)
            .call(d3.axisBottom(x))
            .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end");

        // Add Y axis
        const y = d3.scaleLinear()
            .domain([-0.5, 0.5])
            .range([ height, 0]);
        svg.append("g")
            .call(d3.axisLeft(y));

        // Bars
        svg.selectAll("mybar")
            .data(data)
            .join("rect")
            .attr("x", d => x(d.condition))
            .attr("y", d => {
                if (d.MEblue < 0) {
                    return height/2;
                } else {
                    return y(d.MEblue)
                }
            })
            .attr("width", x.bandwidth())
            .attr("height", d => height - y(Math.abs(d.MEblue)) - height/2)
            .attr("fill", "#69b3a2")
    })
</script>-->

</body>
</html>






