<!DOCTYPE html>
<html lang='en'>
  <head>
    <title>Backboning</title>
    <meta charset='UTF-8'/>
      <meta content='Nacho Caballero' name='author' />
      <!-- <script src="https://code.jquery.com/jquery-1.7.1.min.js"></script> -->
      <script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
      <!-- <script src="https://documentcloud.github.com/underscore/underscore.js"></script> -->
      <script src="http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js"></script>
      <!-- <script src="https://documentcloud.github.com/backbone/backbone.js"></script> -->
      <script src="http://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min.js"></script>
      <!-- <script src="https://mbostock.github.com/d3/d3.js"></script> -->
      <script src="https://d3js.org/d3.v6.js"></script>
      <!-- <script src='main.js'></script>
      <link href='main.css' rel='stylesheet' /> -->
<style>
body {
  width: 1400px;
  margin: 0 auto; }

h1 {
  font-size: 20px;
  font-weight: bold;
  color: white; }

text {
  font-family: Helvetica, Arial, sans-serif;
  font-size: 16px; }

#heatmap .row {
  cursor: pointer; }
  #heatmap .row rect {
    stroke: black;
    stroke-width: 2px; }
  #heatmap .row.current.clicked rect {
    stroke: black; }
  #heatmap .row.current text {
    font-weight: bold; }
#heatmap .column text {
  font-weight: bold; }


</style>

  </head>
  <body>
    <header></header>
    <main>
      <svg id='heatmap'></svg>
      <svg id='pcp'></svg>

      <script>

        // Generated by CoffeeScript 1.3.1
        (function() {
          var Heatmap, getConditionNames, getGeneExpressions, isNumber;
        
          $(document).ready(function() {
            return d3.text("./data/MM_ds_counts_annotation.csv", function(text) {
              var geneExpressionModel, genes, heatmap;
              genes = d3.csv.parse(text);
              geneExpressionModel = new Backbone.Model;
              geneExpressionModel.set({
                conditionNames: getConditionNames(genes)
              });
              geneExpressionModel.set({
                geneNames: genes.map(function(gene) {
                  return gene.proteinId;
                })
              });
              geneExpressionModel.set({
                geneExpressions: getGeneExpressions(genes, geneExpressionModel.get("conditionNames"))
              });
              geneExpressionModel.set({
                extent: d3.extent($.map(geneExpressionModel.get("geneExpressions"), function(item) {
                  return item;
                }))
              });
              geneExpressionModel.set({
                clusters: genes.map(function(gene) {
                  return gene.cluster;
                })
              });
              geneExpressionModel.set({
                clusterColor: d3.scale.category20()
              });
              return heatmap = new Heatmap({
                el: "#heatmap",
                model: geneExpressionModel
              });
            });
          });
        
          Heatmap = Backbone.View.extend({
            initialize: function() {
              return this.render();
            },
            render: function() {
              var cell_size, clusterColor, clusters, columns, conditionNames, conditionNamesMargin, extent, geneExpressions, geneNames, geneNamesMargin, getRow, heatmap, heatmapColor, height, margin, rows, textScaleFactor, width, x, y;
              geneExpressions = this.model.get("geneExpressions");
              conditionNames = this.model.get("conditionNames");
              geneNames = this.model.get("geneNames");
              extent = this.model.get("extent");
              clusters = this.model.get("clusters");
              clusterColor = this.model.get("clusterColor");
              heatmapColor = d3.scale.linear().domain([-1.5, 0, 1.5]).range(["#278DD6", "#fff", "#d62728"]);
              textScaleFactor = 15;
              conditionNamesMargin = d3.max(conditionNames.map(function(conditionName) {
                return conditionName.length;
              }));
              geneNamesMargin = d3.max(geneNames.map(function(geneName) {
                return geneName.length;
              }));
              margin = {
                top: conditionNamesMargin * textScaleFactor,
                right: 150,
                bottom: conditionNamesMargin * textScaleFactor,
                left: geneNamesMargin * textScaleFactor
              };
              cell_size = 30;
              width = cell_size * geneExpressions[0].length;
              height = cell_size * geneNames.length;
              heatmap = d3.select(this.el).append("svg").style("margin-top", "100px").attr("width", width + margin.right + margin.left).attr("height", height + margin.top + margin.bottom).attr("id", "heatmap").append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
              x = d3.scale.ordinal().domain(d3.range(geneExpressions[0].length)).rangeBands([0, width]);
              y = d3.scale.ordinal().domain(d3.range(geneNames.length)).rangeBands([0, height]);
              columns = heatmap.selectAll(".column").data(conditionNames).enter().append("g").attr("class", "column").attr("transform", function(d, i) {
                return "translate(" + x(i) + ")rotate(-90)";
              });
              columns.append("text").attr("x", 6).attr("y", x.rangeBand() / 2).attr("dy", "-.5em").attr("dx", ".5em").attr("text-anchor", "start").attr("transform", "rotate(45)").text(function(d, i) {
                return conditionNames[i];
              });
              getRow = function(row) {
                var cell;
                return cell = d3.select(this).selectAll(".cell").data(row).enter().append("rect").attr("class", "cell").attr("x", function(d, i) {
                  return x(i);
                }).attr("width", x.rangeBand()).attr("height", x.rangeBand()).text(function(d) {
                  return d;
                }).style("fill", function(d) {
                  return heatmapColor(d);
                });
              };
              rows = heatmap.selectAll(".row").data(geneExpressions).enter().append("g").attr("class", "row").attr("name", function(d, i) {
                return "gene_" + i;
              }).attr("transform", function(d, i) {
                return "translate(0," + y(i) + ")";
              }).each(getRow);
              return rows.append("text").attr("x", -6).attr("y", x.rangeBand() / 2).attr("dy", ".32em").attr("text-anchor", "end").text(function(d, i) {
                return geneNames[i];
              });
            }
          });
        
          getGeneExpressions = function(genes, conditionNames) {
            return genes.map(function(gene) {
              return conditionNames.map(function(condition) {
                return +gene[condition];
              });
            });
          };
        
          getConditionNames = function(genes) {
            return Object.keys(genes[0]).filter(function(columnName) {
              return !columnName.match(/cluster/) && isNumber(genes[1][columnName]);
            });
          };
        
          isNumber = function(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
          };
        
        }).call(this);
        
        </script>
    </main>
    <footer>
      <p>
        Built with
        <a href="https://d3js.org/">d3.js</a>.
      </p>
      <a href='#' rel='author'>SJ</a>
    </footer>    
  </body>
</html>

